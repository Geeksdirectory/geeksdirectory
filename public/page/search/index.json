[{"content":"==Linear DS consist of nodes with some sort of data, and a pointer, or link, to the next node.==️ data: The value stored in the node Pointer/Link: a reference to the next node on the sequence\nA big benefit with using linked lists is that ==nodes are stored wherever there is free space in memory, the nodes do not have to be stored contiguously right after each other like elements are stored in arrays==. Another nice thing with linked lists is that when adding or removing nodes, the r️️️️️est of the nodes in the list do not have to be shifted.\n![[Pasted image 20241115153608.png]]\nTypes singly linked list: Each node points to the next node Doubly Linked List: Each node points to both the next and previous nodes. Circular Linked List: The last node points back to the first node. Basic Operations in Linked Lists Insertion: At the beginning. At the end. At a specific position. Deletion: From the beginning. From the end. From a specific position. Traversal: Printing all elements. Counting nodes. Search: Finding a specific value. Reverse the Linked List. Linked list vs Array ![[Pasted image 20241115153756.png]]\nIn memory, an array is stored in [[contiguous memory locations]], where elements are accessed via direct indexing, making it faster for random access but requiring a fixed size. In contrast, a linked list stores nodes in ==non-contiguous memory==, connected by pointers, allowing ==dynamic resizing== but with ==slower access due to sequential traversal.==\nThe image below shows ==how a linked list can be stored in memory==. The linked list has four nodes with values 3, 5, 13 and 2, and each node has a pointer to the next node in the list.\n![[Pasted image 20241115192508.png]]\n![[Pasted image 20241115192550.png]]\nUnlike with arrays, the nodes in a linked list are not placed right after each other in memory. This means that when inserting or removing a node, shifting of other nodes is not necessary, so that is a good thing.\nTypes of linked list singly linked lists Doubly linked lists Circular linked list A singly linked list is the ==simplest kind of linked lists==. It takes up ==less space in memory because each node has only one address to the next nod==e, like in the image below.\n![[Pasted image 20241115193010.png]] A doubly linked list has nodes with ==addresses to both the previous and the next node==, like in the image below, and therefore ==takes up more memory==. But doubly linked lists are ==good if you want to be able to move both up and down in the list.==\n![[Pasted image 20241115193131.png]]\ncircular linked list is like a singly or doubly linked list with the first node, the \u0026ldquo;head\u0026rdquo;, and the last node, the \u0026ldquo;tail\u0026rdquo;, connected.\nCircular linked lists are good for lists you need to cycle through continuously.\n![[Pasted image 20241115193301.png]]\nJava code for Linked lists [[Single linked list]]\nwhat is linked list\nHere is a concise summary of what a Linked List is:\nA linked list is a data structure consisting of nodes, each containing a value and a reference (or link) to the next node in the sequence. This allows for efficient insertion and deletion of elements at any position in the list, making it suitable for applications that require frequent updates. The order of elements in a linked list can be sorted or unsorted, and it is commonly used in algorithms such as stacks and queues, as well as in databases to manage data storage and retrieval.\n","date":"2024-11-15T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/1.-linked-list/","title":"Linked list"},{"content":" 1. Basic Java [[2. Conditions and loops]] [[2. oops in java]] [[Switch Cases and Statements in java]] [[functions in java]] [[3. Time and Space Complexity]] [[Strings and StringBuilder in java]] Searching algorithms [[Linear Search Algorithm]] [[Binary search Algorithm]] [[Binary Search Algo Questions]] [[Binary search in 2d arrays]] sorting algorithms [[1. Bubble sort]] [[2. Selection sort]] [[3. insertion sort]] [[4. Merge sort ]] Quick sort Heap sort [[4. Patterns]] [[5. Recursion]] [[Arrays]] [[Java recursion problems solved can be asked in interview]] [[6. Backtracking]] [[1. Linked List]] Stack Queue Binary Tree BST HashSet HashMap Trie Graph ","date":"2024-10-25T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/0.-dsa-index/","title":"syllabus for DSA"},{"content":"==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: \u0026lsquo;Decompress current Excalidraw file\u0026rsquo;. For more info check in plugin settings under \u0026lsquo;Saving\u0026rsquo;\nExcalidraw Data Text Elements output = false ^KNwDrMnN\nEmbedded Files a8ba5f3e2a552f2d671ab98e0e7eec126446b3f0: [[Pasted Image 20241220161127_990.png]]\n%%\nDrawing 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 %%\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/drawing-2024-12-20-16.00.34.excalidraw/","title":""},{"content":"single linked list every item knows about other item head is reference variable which points to next node , and tail is last one\nlast element is connected to null\n![[Pasted image 20241115202536.png]]\nCode ","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/single-linked-list/","title":""},{"content":"any thing which start with capital letter is a class ![[Pasted image 20241220155436.png]] ![[Pasted image 20241220155403.png]]\nString pool : separate memory structure inside a heap ![[Pasted image 20241220155547.png]]\n![[Pasted image 20241220155653.png]]\nmake a program more optimise\nStrings are immutable we cannot change it we cannot change object\n![[Pasted image 20241220160131.png]]\n![[Pasted image 20241220160159.png]]\n![[Pasted image 20241220160250.png]]\ncomparison of string ![[Pasted image 20241220160454.png]]\nCreate diff objects of Same value ![[Pasted image 20241220160947.png]]\n![[Pasted image 20241220161134.png]]\npretty printing in java ![[Pasted image 20241220173230.png]] output: 453.16f\n\u0026lsquo;%\u0026rsquo; is called placeholder\nSystem.out.printf(\u0026#34;pie: %.3f\u0026#34;, Math.PI); output: 3.142\nHere’s a tabular representation of the commonly used format specifiers in Java. These are used with methods like System.out.printf() or String.format() for formatted output:\nSpecifier Description Example Output %d Integer (decimal) System.out.printf(\u0026quot;%d\u0026quot;, 42); 42 %f Floating-point number System.out.printf(\u0026quot;%.2f\u0026quot;, 3.14); 3.14 %e Scientific notation (lowercase) System.out.printf(\u0026quot;%e\u0026quot;, 12345.678); 1.234568e+04 %E Scientific notation (uppercase) System.out.printf(\u0026quot;%E\u0026quot;, 12345.678); 1.234568E+04 %c Character System.out.printf(\u0026quot;%c\u0026quot;, 'A'); A %s String System.out.printf(\u0026quot;%s\u0026quot;, \u0026quot;Java\u0026quot;); Java %b Boolean System.out.printf(\u0026quot;%b\u0026quot;, true); true %% Literal % symbol System.out.printf(\u0026quot;%%\u0026quot;); % %o Octal integer System.out.printf(\u0026quot;%o\u0026quot;, 10); 12 (octal) %x Hexadecimal integer (lowercase) System.out.printf(\u0026quot;%x\u0026quot;, 255); ff (hex) %X Hexadecimal integer (uppercase) System.out.printf(\u0026quot;%X\u0026quot;, 255); FF (hex) %t Date/Time specifier (see below) %n Newline character System.out.printf(\u0026quot;Hello%nWorld\u0026quot;); Multi-line Additional Date/Time Specifiers (with %t) Specifier Description Example Output %tH Hour (24-hour format) System.out.printf(\u0026quot;%tH\u0026quot;, new Date()); 14 (e.g., 2 PM) %tI Hour (12-hour format) System.out.printf(\u0026quot;%tI\u0026quot;, new Date()); 02 %tM Minute System.out.printf(\u0026quot;%tM\u0026quot;, new Date()); 30 %tS Second System.out.printf(\u0026quot;%tS\u0026quot;, new Date()); 45 %tp AM/PM marker (lowercase) System.out.printf(\u0026quot;%tp\u0026quot;, new Date()); pm %tB Full month name System.out.printf(\u0026quot;%tB\u0026quot;, new Date()); December %tb Abbreviated month name System.out.printf(\u0026quot;%tb\u0026quot;, new Date()); Dec %tA Full day name System.out.printf(\u0026quot;%tA\u0026quot;, new Date()); Friday %ta Abbreviated day name System.out.printf(\u0026quot;%ta\u0026quot;, new Date()); Fri %tY Year (4-digit) System.out.printf(\u0026quot;%tY\u0026quot;, new Date()); 2024 %ty Year (last 2 digits) System.out.printf(\u0026quot;%ty\u0026quot;, new Date()); 24 Formatting Options You can combine format specifiers with flags for more control:\nFlag Description Example Output - Left-align System.out.printf(\u0026quot;%-10d\u0026quot;, 123); 123 + Print sign for numbers System.out.printf(\u0026quot;%+d\u0026quot;, 123); +123 0 Pad with zeroes System.out.printf(\u0026quot;%05d\u0026quot;, 123); 00123 , Use grouping separator System.out.printf(\u0026quot;%,d\u0026quot;, 1234567); 1,234,567 . Precision for floating-point System.out.printf(\u0026quot;%.2f\u0026quot;, 3.14159); 3.14 Example Program import java.util.Date; public class FormatSpecifierDemo { public static void main(String[] args) { System.out.printf(\u0026#34;Integer: %d%n\u0026#34;, 42); System.out.printf(\u0026#34;Float: %.2f%n\u0026#34;, 3.14159); System.out.printf(\u0026#34;Character: %c%n\u0026#34;, \u0026#39;A\u0026#39;); System.out.printf(\u0026#34;String: %s%n\u0026#34;, \u0026#34;Hello\u0026#34;); System.out.printf(\u0026#34;Hexadecimal: %x%n\u0026#34;, 255); System.out.printf(\u0026#34;Current Time: %tT%n\u0026#34;, new Date()); } } operators ![[Pasted image 20241220190008.png]]\n![[Pasted image 20241220190019.png]]\nString builder (only one obj is made and the changes is done in that obj only)\\ we can\u0026rsquo;t name class as StringBuilder as it is already a class ![[Pasted image 20241220195244.png]]\n![[Pasted image 20241220195252.png]]\n![[Pasted image 20241220195330.png]]\nReverse a string use string builder reverse (\u0026ldquo;builder.reverse\u0026rdquo;)\nString Methods ![[Pasted image 20241220195601.png]]\n![[Pasted image 20241220195958.png]]\nPalindrome of a string ![[Pasted image 20241220201924.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/strings-and-stringbuilder-in-java/","title":""},{"content":"old switch case formate\n![[Pasted image 20241118134919.png]]\n![[Pasted image 20241118135539.png]]\nEnhanced switch ![[Pasted image 20241118140209.png]] ![[Pasted image 20241118141223.png]]\nNested switch case\n![[Pasted image 20241118141545.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/switch-cases-and-statements-in-java/","title":""},{"content":"why we need arrays\narray is collection of datatypes Arrays are a type of static data structure because their size is predefined and unchangeable. Array indices start from 0. Arrays ==store elements of the same data type==, e.g., all integers, all strings, etc. Advantages in Java:\nSimple to use for storing fixed-size collections of data. Provides a direct way to manage memory. syntax datatype[] variable_name = ==new== datatype[size];\nhere ==new== is a keyword used to create an object\ned : int[] numbers = new int[5];\nint[] rnos = new int[5]; or int[] rnos2 = {12,23,21,34,43};\n![[Pasted image 20241119120436.png]]\n![[Pasted image 20241119120619.png]]\nhere new is a keyword used to create an object\n![[Pasted image 20241119120751.png]]\n![[Pasted image 20241119120813.png]]\nIn java their is no concept of pointers\narray objects are in heap\nall objects in java is stored in heap\nheap object are not continous (memory are one by one allocated)\narray objects in java may not be continuous (it depends on jvm)\n![[Pasted image 20241119122520.png]]\npassing through function ![[Pasted image 20241119122826.png]]\nstrings are immutable and arrays are mutable in java (here mutable means we can change object)\nMultidimensional array ![[Pasted image 20241119123237.png]]\nmultidimensional arrays are array of arrays\n![[Pasted image 20241119133407.png]]\narr[] \u0026mdash;\u0026ndash;\u0026gt; [4,5,6]\n![[Pasted image 20241119133500.png]]\nindividual size of an array can vary as well , bcoz each array itself is a different object\n![[Pasted image 20241119133949.png]]\ninput of multidimensional array\n![[Pasted image 20241119140517.png]]\ninput and output of multidimensional array\nimport java.util.Scanner; public class MultiDimensionalArray { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); // Input dimensions of the array System.out.print(\u0026#34;Enter number of rows: \u0026#34;); int rows = scanner.nextInt(); System.out.print(\u0026#34;Enter number of columns: \u0026#34;); int cols = scanner.nextInt(); // Declare a 2D array int[][] array = new int[rows][cols]; // Input elements into the array System.out.println(\u0026#34;Enter the elements of the array:\u0026#34;); for (int i = 0; i \u0026lt; rows; i++) { for (int j = 0; j \u0026lt; cols; j++) { System.out.print(\u0026#34;Element [\u0026#34; + i + \u0026#34;][\u0026#34; + j + \u0026#34;]: \u0026#34;); array[i][j] = scanner.nextInt(); } } // Output the 2D array System.out.println(\u0026#34;\\nThe entered 2D array is:\u0026#34;); for (int i = 0; i \u0026lt; rows; i++) { for (int j = 0; j \u0026lt; cols; j++) { System.out.print(array[i][j] + \u0026#34; \u0026#34;); } System.out.println(); // Move to the next line for each row } scanner.close(); } } ![[Pasted image 20241119142537.png]]\nArray list when we don\u0026rsquo;t know how much size of the array we want\n// syntax\nArrayList\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); An ArrayList in Java is a part of the java.util package and provides a resizable array implementation. Unlike arrays, the size of an ArrayList can grow or shrink dynamically.\nAutomatically resizes when elements are added or removed. No need to define a fixed size at initialization. ![[Pasted image 20241119143637.png]]\ninternal working of arraylist\n![[Pasted image 20241119143937.png]]\n![[Pasted image 20241119144049.png]]\nQ1 swap 2 index in an array\n![[Pasted image 20241119151147.png]]\nQ2. find max value of array\nQ3. reverse of array\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/arrays/","title":"Arrays"},{"content":"https://youtu.be/f6UU7V3szVw?si=26WxPdb9UAUEqpAx\nUsed for sorted arrays in ascending or descending order It works by repeatedly dividing the search interval in half and comparing the target with the middle element. Algo find the middle element target ele \u0026gt; mid ele =\u0026gt; search in right else search in left if mid ele == target ele =\u0026gt; ans Loops used in binary search while if else if else\nTime Complexity:![[Pasted image 20241126204755.png]] Best Case: O(1) (target found at the middle). Worst Case: O(log⁡n) (array size halved each step). Space Complexity: O(1) (iterative approach, no extra memory used). while coding ![[Pasted image 20241128052751.png]]\n![[Pasted image 20241128052907.png]]\ncode for binary search [[hinglish explaination of code]] ![[Pasted image 20241128054208.png]]\nOrder agnostic binary search ![[Pasted image 20241128061939.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/binary-search-algorithm/","title":"Binary search algo"},{"content":" [!NOTE] we use binary search in sorted arrays. if we get problem statement with sorted array try binary search first.\nQ.1 ceiling of a given number ceiling of no is smallest ele in arr greater ot == target arr = [2,3,4,5,9,14,16,18], target = 14 if target = 14 then ceiling = 14 ceiling(arr,target=15) = 16\n![[Pasted image 20241202175529.png]]\n![[Pasted image 20241203070828.png]]\nQ.2 Floor of a number ![[WhatsApp Image 2024-12-03 at 06.47.31_98d7e648.jpg]]\nCode ![[Pasted image 20241203070809.png]]\nQ.3 Find Smallest letter greater than target [ leetcode : 744 ] Exact same approach for cieling of the number ignore the target = what are looking for. wrapping of later eg: arr = [\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;,\u0026lsquo;f\u0026rsquo;,\u0026lsquo;j\u0026rsquo;] , target = \u0026lsquo;j\u0026rsquo; output = c we will use modulo (%) condition violeted : start = end + 1 ==\u0026gt; length of array = N ![[Pasted image 20241204144936.png]]\n4. Find First and Last Position of Element in Sorted Array Example 1: Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4]\nExample 2: Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1]\nExample 3: Input: nums = [], target = 0 Output: [-1,-1]\n![[Pasted image 20241204114845.png]]\n5. Find position of an element in a sorted array of infiniate numbers. (amazon interview question) try not to use array.length in infinite array\nhttps://youtu.be/W9QJ8HaRvJQ?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ\u0026t=6656\ntraverse through chunks ![[Pasted image 20241215122615.png]]\n![[Pasted image 20241215121554.png]]\nDoubling the size of chuck\n![[Pasted image 20241215123745.png]]\n![[Pasted image 20241215124827.png]]\n6. leetcode 852 peak index in a mountain Array also known as biotonic arrray = {1,2,3,4,3,2,1}\n![[Pasted image 20241215174002.png]]\nfind peak in mountain array try to solve this question with linear search\nbut here i am using binary search to solve this it is the sorted array it is sorted in 3 halfs (first asending 2nd decenting)\n![[Pasted image 20241216190242.png]]\n7. leetcode 1095 find in mountain array Search in mountain ![[Pasted image 20241216190713.png]]\ncode for this will try later\n8. Search in a Rotated Sorted Array (LeetCode 33) distinct value (no dublicates)\n2 approaches\ncase 1: ![[Pasted image 20241216191656.png]]\n![[Pasted image 20241216191704.png]]\n![[Pasted image 20241216191913.png]]\nremember pivot is the largest number\nfind pivot search in first half (simple binary search) [o,pivot] otherwise, search in second half [pivot + 1, end ] ![[Pasted image 20241216192508.png]]\ncase 2: if mid ele \u0026lt; (mid - 1) ele , so my ans is (mid - 1)\ncase 3: start ele \u0026gt; mid - element\n![[Pasted image 20241216193255.png]]\n![[Pasted image 20241216193417.png]]\ncase 4 ![[Pasted image 20241216194556.png]] ![[Pasted image 20241216201207.png]]\nCode : (duplicate value rotation code is also included) ![[Pasted image 20241217225135.png]] ![[Pasted image 20241217225200.png]] ![[Pasted image 20241217225216.png]] ![[Pasted image 20241217225237.png]]\nQ.9 rotation count ![[Pasted image 20241217232449.png]]\nans = pivot +1\ncode : https://github.com/kunal-kushwaha/DSA-Bootcamp-Java/blob/main/lectures/10-binary%20search/code/src/com/kunal/RotationCount.java\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/binary-search-algo-questions/","title":"Binary Search algo questions"},{"content":"Searching in matrices (2d arrays)\n![[Pasted image 20241219073902.png]]\nwe use nested for loop\n![[Pasted image 20241219074213.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/binary-search-in-2d-arrays/","title":"Binary search in 2d arrays"},{"content":"if - then condition public class Main { Public static void main(String[] args) { if (boolean expression T or F) { //body } else { // do this } } }\n![[Pasted image 20241117184729.png]]\nElse If ![[Pasted image 20241117185831.png]] loops for loop /* Syntax of for loop for ( initialization; condition; increment /decrement){ //body } */\n![[Pasted image 20241117190240.png]]![[Pasted image 20241117190801.png]]\nWhile Loops /* Syntax: while (condition) { //body } */\n![[Pasted image 20241117191323.png]]\nWhen to use which loop use while loop when we don\u0026rsquo;t know how many time loop run and use for loop when we know how many time does loop run\ndo while loop do {\n} while (condition);\ndo while loop executes atleast ones and after that it will check condition\n![[Pasted image 20241117192619.png]]\nQ1 Check if the char is at lowercase or uppercase\n![[Pasted image 20241117193411.png]]\nQ2. Fibonacci no.\n![[Pasted image 20241117194111.png]]\nQ3 count repeated numbers\n![[Pasted image 20241117195655.png]]\nQ4. reverse a number\n![[Pasted image 20241117195810.png]] ![[Pasted image 20241117195929.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/2.-conditions-and-loops/","title":"Conditions and loops"},{"content":"each element is stored right after the previous element\nThe image below shows how an array of integers myArray = [3,5,13,2] is stored in memory. We use a simple kind of memory here with two bytes for each integer, like in the previous example, just to get the idea. ![[Pasted image 20241115192344.png]]\nimage below shows how elements are shifted when an array element is removed. ![[Pasted image 20241115192415.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/contiguous-memory-locations/","title":"Contiguous memory locations"},{"content":"linked list not continous mem alloc tray to break boxes into seperate boxes (array reference)\nfor every block we put it in random mem\nthey are connected with arrows pointer\n![[Pasted image 20241115201811.png]]\npointer is reference variable\nhow linked list works internally\nnode\nsingle linked list eveery item knows about other item\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/dump/","title":"dump"},{"content":" In java we call functions as method function is nothing but the block of code. /* return_type name (arguments) { //body return statement } */\nIn coding world the word \u0026ldquo;dry\u0026rdquo; means don\u0026rsquo;t repeat yourself\n![[Pasted image 20241118150649.png]]\nreturn is the value of the function call\n![[Pasted image 20241118150856.png]]\npass the value of numbers when you are calling the method in main() ![[Pasted image 20241118154907.png]]\nno pass-by reference in java only pass-by value\nprimitive: int , short,char,byte \u0026hellip;. \u0026mdash;\u0026ndash;\u0026gt; just passing value object and stuff \u0026mdash;\u0026ndash;\u0026gt; passing value of the reference\n![[Pasted image 20241118175747.png]]\nscoping in java function scope if you define any thing in function then you will only access those things inside the function this is also applicable to args\nScoping in Java refers to the visibility and lifecycle of variables, methods, and classes within different parts of a program. Proper scoping ensures that variables and methods are accessible only where they are needed, reducing potential errors and improving code readability and maintainability.\n1. Class Scope What it is: Variables and methods declared at the class level. Visibility: These are accessible throughout the class. Access can be controlled using access modifiers (public, protected, private, or package-private). Example: public class Example { private int count; // Class scope (accessible throughout the class) public void increment() { count++; // Accessible here } public int getCount() { return count; // Accessible here too } } 2. Block Scope What it is: Variables declared within a block (e.g., loops, conditionals). Visibility: These are only accessible within the block where they are declared. Example: public void printEvenNumbers() { for (int i = 0; i \u0026lt; 10; i++) { // `i` has block scope if (i % 2 == 0) { System.out.println(i); } } // System.out.println(i); // Error: `i` is not accessible here } 3. Loop Scope Loop variables are scoped to the loop they are declared in: for (int i = 0; i \u0026lt; 5; i++) { System.out.println(i); // `i` is accessible here } // System.out.println(i); // Error: `i` is out of scope anything that is initialize outside the block can be used inside the block, anything that is initialize inside cannot use outside\nShadowing in java ![[Pasted image 20241118183209.png]]\nShadowing happens when a variable in an inner scope (e.g., a method or block) has the same name as a variable in an outer scope (e.g., a class or enclosing block). The inner variable takes precedence, \u0026ldquo;hiding\u0026rdquo; the outer variable.\nKey Points: Occurs in Nested Scopes:\nLocal variables, method parameters, or block variables can shadow instance or class variables. Accessing Shadowed Variables:\nUse this to access instance variables. Use the class name to access static variables. Examples:\nInstance Variable Shadowed: int x = 10; // Instance variable public void setX(int x) { // Parameter shadows instance variable this.x = x; // `this.x` refers to the instance variable } Static Variable Shadowed: static int x = 100; // Static variable public void displayX() { int x = 200; // Local variable shadows static variable System.out.println(x); // Local (200) System.out.println(Example.x); // Static (100) } Best Practices:\nAvoid reusing variable names unnecessarily. Use explicit qualifiers like this or the class name to clarify which variable you’re referencing. Variable Arguments ![[Pasted image 20241118183745.png]]\nFunction overloading occurs at compiletime\n![[Pasted image 20241118184020.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/functions-in-java/","title":"functions in java"},{"content":"https://youtu.be/_HRA37X8N_Q?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ\nA simple algorithm that checks each element in the array until the target element is found or the end of the array is reached.\n![[Pasted image 20241121133906.png]]\nstart searching from the first element till the element which we are finding\nwe use for loop in linear searching\ntime complexity :\nBest Case: O(1) // constant Worst Case: O(n) // here n is the size of the array ![[Pasted image 20241121134313.png]]\n![[Pasted image 20241121134405.png]] linear time complexity (above image)\n![[Pasted image 20241121134446.png]] best case time complexity (above image)\nO(n) (upper bound time complexity) means it will never go worst then linear, it is always better than linear\nspace complexity means are you taking extra space (extra space taken)\npublic class Search { // Class name should start with an uppercase letter for convention public static void main(String[] args) { // Define an array of integers to search from int[] nums = {1, 2, 3, 4, 2, 1, 3, 5, 6}; // The target value we want to find in the array int target = 5; // Call the linearSearch method to search for the target in the array int ans = linearSearch(nums, target); // Print the result: If found, it will print the index; otherwise, -1 System.out.println(ans); } /** * Perform a linear search in the array. * @param arr The array to search in * @param target The value to search for * @return The index of the target if found, otherwise -1 */ static int linearSearch(int[] arr, int target) { // If the array is empty, return -1 as there is nothing to search if (arr.length == 0) { return -1; } // Iterate through each element in the array for (int index = 0; index \u0026lt; arr.length; index++) { // Get the current element at the index int element = arr[index]; // Check if the current element matches the target if (element == target) { return index; // Return the index of the target if found } } // If the loop completes and the target is not found, return -1 return -1; } } ![[Pasted image 20241121140431.png]] ![[Pasted image 20241121140448.png]]\nQ. Is a char present in the string ![[Pasted image 20241122234332.png]]\nQ. Search in Range ![[Pasted image 20241121141646.png]]\n![[Pasted image 20241121142520.png]]\nQ. find minimum element in the ARRAY ![[Pasted image 20241121142733.png]]\n![[Pasted image 20241121142851.png]]\n![[Pasted image 20241121142913.png]]\nQ. Searching in 2d arrays ![[Pasted image 20241124002356.png]]\nQ. Search and print maximum value in 2D array ![[Pasted image 20241124003045.png]]\n![[Pasted image 20241121153028.png]]\n![[Pasted image 20241125185619.png]]\nhttps://youtu.be/vwa9vgYz5ZE?t=35\n![[Pasted image 20241125190847.png]]\n![[Pasted image 20241121153519.png]]\n![[Pasted image 20241121154417.png]]\n![[Pasted image 20241125193442.png]]\n","date":"0001-01-01T00:00:00Z","permalink":"https://yashbhangale.github.io/mydocs/post/dsa/linear-search-algorithm/","title":"linear search algo"}]