[{"content":"#hii\n","date":"2024-08-27T17:17:13+05:30","permalink":"https://geeksdirectory.github.io/post/hosting_static_website_azure_ngnix/","title":"Hosting_static_website_azure_ngnix"},{"content":"clone the desired repo (git clone repourl)\ngit clone https://github.com/yashbhangale/geeksdirhugo.git assign access token (password) to the remote repo sudo git remote set-url origin https://Accesstokenpastehere@github.com/yashbhangale/geeksdirhugo.git then cd into repo\nassign username and user email sudo git config --global user.email \u0026#34;yashbhangale9@gmail.com\u0026#34; sudo git config --global user.name \u0026#34;yashbhangale\u0026#34; ","date":"2024-06-05T12:24:01+05:30","permalink":"https://geeksdirectory.github.io/post/gitconfigurepasswordinlinux/","title":"Git configure password in linux"},{"content":"basics of shell scripting : what is shell? A shell is a command-line interpreter that provides a user interface for the Unix/Linux operating system. Users can typecommands to perform specific tasks such as navigating the file system, running programs, and managing system processes. Thereare different types of shells, with Bash (Bourne Again Shell) being one of the most popular.\nwhat is shell scripting? Shell scripting is a text file with a list of commands that instruct an operating system to perform certain tasks. A shell is an interface that interprets, processes, and executes these commands from the shell script. It can be particularly helpful to automate repetitive tasks, helping to save time and reduce human error.\nTypes of Shells: Bash (Bourne Again Shell) Zsh (Z Shell) Ksh (Korn Shell) Tcsh (Tenex C Shell) A shell script is a text file containing a series of commands that the shell can execute. It typically has a .sh extension.\nCreating and Running a Simple Shell Script: Create a new file: Use a text editor like nano, vi, or gedit to create a new file. Name it example.sh. Add the shebang line: The first line of the script should be #!/bin/bash to specify that the script should be run with Bash. Add commands: Write some simple commands. For example: #!/bin/bash echo \u0026#34;Hello, World!\u0026#34; Save the file and exit the editor. Make the script executable: Change the file\u0026rsquo;s permissions to make it executable. chmod +x example.sh Run the script: Execute the script by typing: ./example.sh Basic shell scripting commands Navigating the Filesystem pwd (Print Working Directory) ls (List) ls: Basic listing ls -l: Long listing format (shows file permissions, ownership, size, and modification date) ls -a: Lists all files, including hidden files (those starting with a dot) ls -lh: Long listing with human-readable file sizes cd (Change Directory) cd /path/to/directory: Change to a specific directory cd ..: Move up one directory level cd ~: Move to the home directory cd -: Switch to the previous directory mkdir (Make Directory) mkdir new_directory rmdir (Remove Directory): remove an empty directory rmdir dirname touch: create an empty file with touch command touch filename.extension cp (copyfile/dir) mv (move file/dir) rm (remove): rm file: Remove a file rm -r directory: Remove a directory and its contents recursively rm -i file: Prompt before each removal (interactive mode) rm -f file: Force removal without prompt (use with caution) viewing file content cat: Concatenate and display file contents less: View file contents one page at a time, with navigation options head: View the first few lines of a file tail: View the last few lines of a file shell scripting structure shebang(#!/bin/bash) The shebang (#!) is used at the beginning of a script to specify the interpreter that should be used to execute the script. The most common shebang for Bash scripts is #!/bin/bash. #!/bin/bash echo \u0026#34;hii\u0026#34; comments: used to add explanation and notes in the script #!/bin/bash echo hii # this is comment stores the data that can be referenced and manipulated within the script #!/bin/bash # Assign a value to a variable greeting=\u0026#34;Hello, World!\u0026#34; # Use the variable echo $greeting important points No spaces around the = sign when assigning a value. Use $ before the variable name to reference its value.\nVariable Operations:\nEnvironment Variables: Access environment variables using $VARIABLE_NAME. Local Variables: Defined within the script and accessible only in that script. Command Substitution: Assign the output of a command to a variable using backticks command or $(command).\n#!/bin/bash # Command substitution current_date=$(date) echo \u0026#34;Today\u0026#39;s date is: $current_date\u0026#34; Quoting Quoting is used to handle strings and special characters. There are three types of quoting: single quotes, double quotes, and backticks. #!/bin/bash name=\u0026#39;John Doe\u0026#39; echo \u0026#39;Hello, $name\u0026#39; # Outputs: Hello, $name ","date":"2024-06-05T11:52:01+05:30","permalink":"https://geeksdirectory.github.io/post/shellscripting/","title":"Shellscripting"},{"content":"#hii\nhow are you\naabara ka dabra\nooyee papaji\nooye paaji ooye\n","date":"2024-06-04T00:38:39+05:30","permalink":"https://geeksdirectory.github.io/post/docs/","title":"Docs"}]